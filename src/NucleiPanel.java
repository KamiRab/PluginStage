import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ij.IJ;
import ij.ImagePlus;
import ij.process.AutoThresholder;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ItemEvent;
import java.awt.event.ActionListener;

public class NucleiPanel extends JPanel {
    private JCheckBox isAZStackCheckBox;
    private JComboBox<String> zProjMethods;
    private JLabel zProjMethodsLabel;
    private JComboBox<String> threshMethods;
    private JSpinner minSizeNucleus;
    private JLabel minSizeNucleus_label;
    private JLabel threshMethods_label;
    private JPanel zProj;
    private JCheckBox useWatershedCheckBox;
    private JPanel main;
    private JPanel parameters;
    private JList<ImagePlusDisplay> imageList;
    private JButton validateList;
    private JPanel choiceByList;
    private JPanel choiceByExtension;
    private JTextField imageEnding;
    private JLabel segmentationMethodsLabel;
    private JLabel endingLabel;
    private JRadioButton thresholdRadioButton;
    private JRadioButton deepLearningRadioButton;
    private JButton previewButton;
    private JScrollPane imageListScrolling;
    private final ImagePlusDisplay[] imagesNames;
    private final DefaultListModel<ImagePlusDisplay> model = new DefaultListModel<>();
    private ImagePlusDisplay[] selectedDAPI;

    //update combo avec extension ==> enlever bouton
//    mettre extension par defaut et selectionner toutes les images par defaut si rien de selectionnÃ©
//    attention message d'erreur si mauvaise concordance
//    pour z-stack pouvoir choisir 1er et dernier plan (limiter nombre de plans)
//     preview : que premiere image et en bouton
//    get Last substring index
    //TODO preference
    public NucleiPanel(ImagePlusDisplay[] ip_list) {
        $$$setupUI$$$();
        imagesNames = ip_list;
        //        List of images
        if (imagesNames != null) {
            model.removeElement("Nothing to display");
            for (ImagePlusDisplay ip : imagesNames) {
                model.addElement(ip); /*TODO images avec meme nom ?*/
            }
        }

        /*Are the images stacks ?*/
        isAZStackCheckBox.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                zProjMethods.setVisible(true);
                zProjMethodsLabel.setVisible(true);
            } else {
                zProjMethods.setVisible(false);
                zProjMethodsLabel.setVisible(false);
            }
        });
        previewButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (imagesNames != null) {
                    new NucleiDetector(imagesNames[0], isAZStackCheckBox.isSelected(), zProjMethods.getItemAt(zProjMethods.getSelectedIndex()), deepLearningRadioButton.isSelected(), threshMethods.getItemAt(threshMethods.getSelectedIndex()), (Double) minSizeNucleus.getValue(), useWatershedCheckBox.isSelected()).run();
//                lance test pour premiere image de la liste
                } else {
                    IJ.error("There is no image to be used to do a preview.");
                }
            }
        });
    }

    public JPanel getMain() {
        return main;
    }

    public void results() {
        IJ.log(zProjMethods.getItemAt(zProjMethods.getSelectedIndex()));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        main = new JPanel();
        main.setLayout(new GridLayoutManager(5, 3, new Insets(0, 0, 0, 0), -1, -1));
        main.setBorder(BorderFactory.createTitledBorder(null, "Detect nuclei", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        zProj = new JPanel();
        zProj.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        main.add(zProj, new GridConstraints(3, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(487, 48), null, 0, false));
        isAZStackCheckBox = new JCheckBox();
        isAZStackCheckBox.setText("Is a Z-stack ?");
        zProj.add(isAZStackCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zProjMethodsLabel = new JLabel();
        zProjMethodsLabel.setEnabled(true);
        zProjMethodsLabel.setText("Method of projection");
        zProj.add(zProjMethodsLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zProjMethods = new JComboBox();
        zProjMethods.setEnabled(true);
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Maximum projection");
        defaultComboBoxModel1.addElement("Standard Deviation projection");
        zProjMethods.setModel(defaultComboBoxModel1);
        zProj.add(zProjMethods, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parameters = new JPanel();
        parameters.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        main.add(parameters, new GridConstraints(4, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        threshMethods_label = new JLabel();
        threshMethods_label.setText("Threshold method");
        parameters.add(threshMethods_label, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        minSizeNucleus_label = new JLabel();
        minSizeNucleus_label.setText("Minimum size of nucleus");
        parameters.add(minSizeNucleus_label, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parameters.add(minSizeNucleus, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        useWatershedCheckBox = new JCheckBox();
        useWatershedCheckBox.setText("Use watershed");
        parameters.add(useWatershedCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parameters.add(threshMethods, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        previewButton = new JButton();
        previewButton.setText("Preview");
        parameters.add(previewButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        segmentationMethodsLabel = new JLabel();
        segmentationMethodsLabel.setText("Which method of segmentation do you want to use ?");
        main.add(segmentationMethodsLabel, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        choiceByList = new JPanel();
        choiceByList.setLayout(new GridLayoutManager(2, 2, new Insets(0, 0, 0, 0), -1, -1));
        main.add(choiceByList, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        validateList = new JButton();
        validateList.setText("Choose DAPI image(s)");
        choiceByList.add(validateList, new GridConstraints(0, 1, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imageListScrolling = new JScrollPane();
        choiceByList.add(imageListScrolling, new GridConstraints(0, 0, 2, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        imageListScrolling.setViewportView(imageList);
        choiceByExtension = new JPanel();
        choiceByExtension.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        main.add(choiceByExtension, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        endingLabel = new JLabel();
        endingLabel.setText("Image ending without extension");
        choiceByExtension.add(endingLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imageEnding.setText("");
        choiceByExtension.add(imageEnding, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        thresholdRadioButton = new JRadioButton();
        thresholdRadioButton.setText("Threshold");
        main.add(thresholdRadioButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deepLearningRadioButton = new JRadioButton();
        deepLearningRadioButton.setText("Deep learning");
        main.add(deepLearningRadioButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(thresholdRadioButton);
        buttonGroup.add(deepLearningRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

    private void createUIComponents() {
        model.addElement(null);
        imageList = new JList<>(model);


// List of methods for threshold
        threshMethods = new JComboBox<>(AutoThresholder.getMethods());

// minSize spinner
        minSizeNucleus = new JSpinner(new SpinnerNumberModel(1000.0, 0.0, null, 100.0));

//  Textfield to filter extension
        imageEnding = createTextfield();
    }

    public void filterModel(DefaultListModel<ImagePlusDisplay> model, String filter) {
        for (ImagePlusDisplay image : imagesNames) {
            String title = image.getImagePlus().getTitle();
            if (!title.endsWith(filter) || !title.endsWith(filter.split("\\.")[0])) {
                if (model.contains(image)) {
                    model.removeElement(image);
                }
            } else {
                if (!model.contains(image)) {
                    model.addElement(image);
                }
            }
        }
    }

    private JTextField createTextfield() { /*https://stackoverflow.com/a/26272327*/
        final JTextField field = new JTextField(15);
        field.getDocument().addDocumentListener(new DocumentListener() {
            @Override
            public void insertUpdate(DocumentEvent e) {
                filter();
            }

            @Override
            public void removeUpdate(DocumentEvent e) {
                filter();
            }

            @Override
            public void changedUpdate(DocumentEvent e) {
            }

            private void filter() {
                String filter = field.getText();
                filterModel((DefaultListModel<ImagePlusDisplay>) imageList.getModel(), filter);
            }
        });
        return field;
    }
}
