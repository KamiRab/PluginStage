import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ij.IJ;
import ij.ImagePlus;
import ij.process.AutoThresholder;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.ItemEvent;

public class Detect_Nuclei {
    private JCheckBox isAZStackCheckBox;
    private JComboBox<String> zProjMethods;
    private JLabel zProjMethodsLabel;
    private JComboBox<String> threshMethods;
    private JSpinner minSizeNucleus;
    private JLabel minSizeNucleus_label;
    private JLabel threshMethods_label;
    private JPanel zProj;
    private JCheckBox useWatershedCheckBox;
    private JButton previewButton;
    private JPanel main;
    private JPanel parameters;
    private JList<String> imageList;
    private JButton validateList;
    private JPanel choiceByList;
    private JPanel choiceByExtension;
    private JTextField imageEnding;
    private JLabel segmentationMethodsLabel;
    private JLabel endingLabel;
    private JRadioButton deepLearningRadioButton;
    private JPanel segmentationMethod;
    private final ImagePlus[] imagesNames;
    private final DefaultListModel<String> model = new DefaultListModel<>();
    private ImagePlus[] selectedDAPI;
    private JRadioButton thresholdRadioButton;

    //update combo avec extension ==> enlever bouton
//    mettre extension par defaut et selectionner toutes les images par defaut si rien de selectionnÃ©
//    attention message d'erreur si mauvaise concordance
//    pour z-stack pouvoir choisir 1er et dernier plan (limiter nombre de plans)
//     preview : que premiere image et en bouton
//    get Last substring index
    //TODO preference
    public Detect_Nuclei(ImagePlus[] ip_list) {
        $$$setupUI$$$();
        imagesNames = ip_list;
        /*Are the images stacks ?*/

        isAZStackCheckBox.addItemListener(e -> {
            if (e.getStateChange() == ItemEvent.SELECTED) {
                zProjMethods.setVisible(true);
                zProjMethodsLabel.setVisible(true);
            } else {
                zProjMethods.setVisible(false);
                zProjMethodsLabel.setVisible(false);
            }
        });
        previewButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                new nucleiDetector(imagesNames[0], isAZStackCheckBox.isSelected(), zProjMethods.getItemAt(zProjMethods.getSelectedIndex()), deepLearningRadioButton.isSelected(), threshMethods.getItemAt(threshMethods.getSelectedIndex()), (Double) minSizeNucleus.getValue(), useWatershedCheckBox.isSelected());
//                lance test pour premiere image de la liste
            }
        });
    }

    public JPanel getMain() {
        return main;
    }

    public void results() {
        IJ.log(zProjMethods.getItemAt(zProjMethods.getSelectedIndex()));
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        main = new JPanel();
        main.setLayout(new GridLayoutManager(5, 1, new Insets(0, 0, 0, 0), -1, -1));
        main.setBorder(BorderFactory.createTitledBorder(null, "Detect nuclei", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        zProj = new JPanel();
        zProj.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        main.add(zProj, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(1000, -1), 0, false));
        isAZStackCheckBox = new JCheckBox();
        isAZStackCheckBox.setText("Is a Z-stack ?");
        zProj.add(isAZStackCheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zProjMethodsLabel = new JLabel();
        zProjMethodsLabel.setEnabled(true);
        zProjMethodsLabel.setText("Method of projection");
        zProj.add(zProjMethodsLabel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        zProjMethods = new JComboBox();
        zProjMethods.setEnabled(true);
        final DefaultComboBoxModel defaultComboBoxModel1 = new DefaultComboBoxModel();
        defaultComboBoxModel1.addElement("Maximum projection");
        defaultComboBoxModel1.addElement("Standard Deviation projection");
        zProjMethods.setModel(defaultComboBoxModel1);
        zProj.add(zProjMethods, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parameters = new JPanel();
        parameters.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        main.add(parameters, new GridConstraints(4, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(1000, -1), 0, false));
        threshMethods_label = new JLabel();
        threshMethods_label.setText("Threshold method");
        parameters.add(threshMethods_label, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        minSizeNucleus_label = new JLabel();
        minSizeNucleus_label.setText("Minimum size of nucleus");
        parameters.add(minSizeNucleus_label, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parameters.add(minSizeNucleus, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        previewButton = new JButton();
        previewButton.setText("Preview");
        parameters.add(previewButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        useWatershedCheckBox = new JCheckBox();
        useWatershedCheckBox.setText("Use watershed");
        parameters.add(useWatershedCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        parameters.add(threshMethods, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        choiceByList = new JPanel();
        choiceByList.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        main.add(choiceByList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(1000, -1), 0, false));
        choiceByList.add(imageList, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        validateList = new JButton();
        validateList.setText("Choose DAPI image(s)");
        choiceByList.add(validateList, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        choiceByExtension = new JPanel();
        choiceByExtension.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        main.add(choiceByExtension, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(1000, -1), 0, false));
        endingLabel = new JLabel();
        endingLabel.setText("Image ending without extension");
        choiceByExtension.add(endingLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        imageEnding = new JTextField();
        imageEnding.setText("");
        choiceByExtension.add(imageEnding, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        segmentationMethod = new JPanel();
        segmentationMethod.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        main.add(segmentationMethod, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, 1, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(1000, -1), 0, false));
        segmentationMethodsLabel = new JLabel();
        segmentationMethodsLabel.setText("Which method of segmentation do you want to use ?");
        segmentationMethod.add(segmentationMethodsLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        deepLearningRadioButton = new JRadioButton();
        deepLearningRadioButton.setText("Deep learning");
        segmentationMethod.add(deepLearningRadioButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        thresholdRadioButton = new JRadioButton();
        thresholdRadioButton.setText("Threshold");
        segmentationMethod.add(thresholdRadioButton, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, 1, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(deepLearningRadioButton);
        buttonGroup.add(thresholdRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

    private void createUIComponents() {

//        List of images
        if (imagesNames == null) {
            model.addElement("Nothing to display");
        } else {
            for (ImagePlus ip : imagesNames) {
                model.addElement(ip.getTitle()); /*TODO images avec meme nom ?*/
            }
        }
        imageList = new JList<>(model);

// List of methods for threshold
        threshMethods = new JComboBox<>(AutoThresholder.getMethods());

// minSize spinner
        minSizeNucleus = new JSpinner(new SpinnerNumberModel(1000.0, 0, Double.MAX_VALUE, 10));
    }

    public static void main(String[] args) {
        JFrame test = new JFrame("Espoir");
        ImagePlus[] imagesToAnalyze = new ImagePlus[3];
        imagesToAnalyze[0] = IJ.openImage("C:/Users/Camille/Downloads/Camille_Stage2022/Macro 1_Foci_Noyaux/Images/WT_HU_Ac-2re--cell003_w31 DAPI 405.TIF");
        imagesToAnalyze[1] = IJ.openImage("C:/Users/Camille/Downloads/Camille_Stage2022/Macro 1_Foci_Noyaux/Images/WT_HU_Ac-2re--cell003_w11 CY5.TIF");
        imagesToAnalyze[2] = IJ.openImage("C:/Users/Camille/Downloads/Camille_Stage2022/Macro 1_Foci_Noyaux/Images/WT_HU_Ac-2re--cell003_w21 FITC.TIF");
        test.setContentPane(new Detect_Nuclei(imagesToAnalyze).getMain());
        test.pack();
        test.setVisible(true);

    }
}
