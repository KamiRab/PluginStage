package GUI;

import Helpers.Calibration;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import ij.IJ;

import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.util.ArrayList;
//TODO validate ==> modify the entire file
/*TODO if name already exists, error ?*/
public class NewCalibrationPanel extends JFrame {
    private JPanel mainPanel;
    private JButton validateButton;
    private JTable calibrationTable;
    private JTextField addNameField;
    private JTextField addValueField;
    private JTextField addUnitFIeld;
    private JButton addButton;
    private JScrollPane calibrationTableScroll;
    private JPanel addCalibrationPanel;
    private DefaultTableModel tableModel;
    private final ArrayList<Calibration> calibrationToAdd = new ArrayList<>();

    public NewCalibrationPanel(DefaultComboBoxModel<Calibration> calibration_values) {
        $$$setupUI$$$();
        addButton.addActionListener(e -> {
            if (addNameField.getText().length() > 0 && addValueField.getText().length() > 0 && addUnitFIeld.getText().length() > 0) {
                tableModel.addRow(new Object[]{addNameField.getText(), addValueField.getText(), addUnitFIeld.getText()});
                calibrationToAdd.add(new Calibration(addNameField.getText(), addValueField.getText(), addUnitFIeld.getText()));
            } else {
                IJ.error("All the fields need to be filled");
            }
        });
        validateButton.addActionListener(e -> {
            for (Calibration calibration : calibrationToAdd
            ) {
                calibration.addCalibrationToFile();
                calibration_values.addElement(calibration);
            }
//            tableModel.getValueAt()
//            calibration_values.addElement(new Helpers.Calibration(nameField.getText(), valueField.getText(), unitField.getText()));
        });
//        cancelButton.addActionListener(e -> this.dispose());
    }

    public void run() {
        setTitle("Add a calibration");
        setContentPane(this.mainPanel);
        setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        pack();
        setVisible(true);
    }

    public static void main(String[] args) {
        NewCalibrationPanel newCalibrationPanel = new NewCalibrationPanel(null);
        newCalibrationPanel.run();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.setBorder(BorderFactory.createTitledBorder(null, "Calibrations", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        calibrationTableScroll = new JScrollPane();
        mainPanel.add(calibrationTableScroll, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 1, false));
        calibrationTableScroll.setViewportView(calibrationTable);
        validateButton = new JButton();
        validateButton.setText("Validate modifications");
        mainPanel.add(validateButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addCalibrationPanel = new JPanel();
        addCalibrationPanel.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(addCalibrationPanel, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        addCalibrationPanel.setBorder(BorderFactory.createTitledBorder(null, "Add a calibration", TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        addNameField = new JTextField();
        addCalibrationPanel.add(addNameField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addValueField = new JTextField();
        addCalibrationPanel.add(addValueField, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addUnitFIeld = new JTextField();
        addUnitFIeld.setText("");
        addCalibrationPanel.add(addUnitFIeld, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        addButton = new JButton();
        addButton.setText("Add");
        addCalibrationPanel.add(addButton, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
        ArrayList<Calibration> calibrations = Calibration.getCalibrationFromFile();
        String[] header = new String[]{"Name", "Value", "Unit"};
        Object[][] content = new Object[calibrations.size()][header.length];
        for (int row = 0; row < calibrations.size(); row++) {
            Calibration calibration = calibrations.get(row);
            content[row][0] = calibration.getName();
            content[row][1] = calibration.getPixelArea();
            content[row][2] = calibration.getUnit();
        }
        tableModel = new DefaultTableModel(content, header);
        calibrationTable = new JTable(tableModel);
//        TableColumn nameColumn = calibrationTable.getColumnModel().getColumn(0);
//        nameColumn.setCellEditor(new DefaultCellEditor(new JTextField()));
//        TableColumn valueColumn = calibrationTable.getColumnModel().getColumn(1);
//        TableColumn unitColumn = calibrationTable.getColumnModel().getColumn(2);
    }
}
